
xor:
----
0 xor a = a;
a xor a = 0;

divisors:
-----------
vector<int> findDivisors(int n) {
    vector<int> divisors;
    
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) { // avoid adding square root twice for perfect squares
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}

Prime Number:
------------
bool isPrime(int n) {
    if (n <= 1) return false; // 0 and 1 are not prime

    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false; // found a divisor, so not prime
        }
    }

    return true; // no divisors found
}


GCD:
-----
method 1: using for loop

method 2: using eucledian algorithm (optimal)
	gcd (n1, n2) = gcd (n1-n2, n2); where n1 > n2;



int gcd (int n1, int n2) {
	if (n2 > n1) swap(n1, n2);
	if (n2 == 0) {
		return n1; // if one of them is 0 then other is the gcd.
	}
	return gcd (n1%n2, n2); // gcd (greater%smaller, smaller);
}