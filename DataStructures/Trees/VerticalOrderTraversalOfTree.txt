class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> res;
        if (root == NULL) return res;
        queue<pair<TreeNode*, pair<int, int>>> q;
        map<int, map<int, multiset<int>>> m;// vertical, level, set of numbers
        q.push({root, {0, 0}});
        while(q.size() > 0) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto node = q.front();
                int x = node.second.first, y = node.second.second;
                q.pop();
                m[x][y].insert(node.first->val);
                if (node.first->left != NULL) {
                    q.push({node.first->left, {  x - 1, y + 1 }});
                }
                if (node.first->right != NULL) {
                    q.push({node.first->right, { x + 1, y + 1 }});
                }
            }
        }
        for (auto value: m) {
            vector<int> col;
            for (auto val : value.second) {
                col.insert(col.end(), val.second.begin(), val.second.end());
            }
            res.push_back(col);
        }
        return res;
    }
};