1. using recursive approach:
-----------------------------

void helper (root, level) {
    if (root == NULL) return;
    if (level == res.size()) {
        res.push_back(root->val);
    }

    helper(root->right, level + 1);
    helper(root->left, level + 1);
    // swap above 2 lines for left side view
}

#include <vector>
#include <queue>
using namespace std;


// BFS Approach takesoumen collection 
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        if (!root) return result;

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int levelSize = q.size();
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* node = q.front();
                q.pop();


                // for left side view change the below condition to i == 0
                if (i == levelSize - 1) result.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
        }

        return result;
    }
};