

// Fast power with overflow check
// pow(x, n) overflows with large numbers. Hence this check is needed.
int isProductLessThanX(long long mid, int n, long long x) {
    long long result = 1;
    for (int i = 0; i < n; ++i) {
        if (result > x) return 0; // Overflow check
        result *= mid;
    }
	if (result == x) return 1;
    return result 2; // result < x
}

int nthRoot(int n, long long x) {
    long long low = 1, high = x, ans = -1;
    while (low <= high) {
        long long mid = low + (high - low) / 2;
		int val =  isProductLessThanX(mid, n, x);
        if (val == 1) {
			return mid;
        } else if (val == 0) {
			high = mid - 1;
		}  else {
			ans = mid;
			low = mid + 1;
		}
    }
    return 0; // dummy return;
}
