Topological Sort: (it works for not connected graph also)
-------------------- 
Linear Ordering of vertices, such that if there is a edge between u & v then u shoule appear before v in the Ordering.

it exists in only directed acyclic graph. (directed graph without cycles)

a DAG must have one or more nodes with indegree 0. and 
DAG must have one or more nodes with outdegree 0.
Longest path b/w 2 nodes in a DAG must be finite.


#include <bits/stdc++.h> 
void dfs(vector<vector<int>>& graph, vector<int>& visited, vector<int>& st, int index) {
    visited[index] = 1;
    for (int i = 0; i<graph[index].size(); i++) {
        if (visited[graph[index][i]] == 0) {
            dfs(graph, visited, st, graph[index][i]);
        }
    }
    st.push_back(index);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int n, int e)  {
    vector<vector<int>> graph(n);
    for (int i = 0; i<edges.size(); i++) {
        graph[edges[i][0]].push_back(edges[i][1]);
    }
    vector<int> st;
    vector<int> visited(n, 0);
    for (int i = 0; i<n; i++) {
        if (visited[i] == 0) {
            dfs(graph, visited, st, i);
        }
    }
    reverse(st.begin(), st.end());
    return st;
}