class DisjointSet {
    public:
        vector<int> parent, size;
        DisjointSet(int n) {
            parent.resize(n + 1);
            size.resize(n + 1);
            for (int i = 0; i <= n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int findUPar(int node) {
            if (node == parent[node])
                return node;
            return parent[node] = findUPar(parent[node]);
        }

        void unionBySize(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if (ulp_u == ulp_v) return;
            if (ulp_u != ulp_v) {
                parent[ulp_u] = ulp_v;
                size[ulp_v] += size[ulp_u];
            }
        }
};

class Solution {
public:

    bool checkValidity(string s1, string s2) {
        int c = 0, n = s1.size();
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) c++;
        }
        return c == 0 || c == 2;
    }
    int numSimilarGroups(vector<string>& strs) {
        int n = strs.size();
        DisjointSet ds(n);
        for (int i = 0; i<n; i++) {
            for (int j = i+1; j<n; j++) {
                if (checkValidity(strs[i], strs[j])) {
                    ds.unionBySize(i, j);
                }
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (ds.parent[i] == i) cnt++;
        }
        return cnt;
    }
};