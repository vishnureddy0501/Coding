    vector<int> vec = {10, 20, 30};
    cout << vec[1];       // Output: 20
    vec.push_back(value) //Adds value to the end.
    vec.pop_back(); // Removes the last element.
    vec.insert(vec.begin() + 1, 150);  // insert at specific position
    vec.erase(vec.begin() + 1);       // Removes the element at pos.
    vec.size();   // size of vector
    sort(vec.begin(), vec.end()) // Sorts the vector. Inplace sorting.

find in a vector:
-----------------
    find(vec.begin(), vec.end(), value): Searches for value and returns an iterator.
    auto it = find(vec.begin(), vec.end(), 20);
    if (it != vec.end()) std::cout << "Found";  // Output: Found

6. Finding Max and Min Elements
    int maxVal = *max_element(vec.begin(), vec.end());  // maxVal: 30
    int minVal = *min_element(vec.begin(), vec.end());  // minVal: 10

7. Reversing
    reverse(vec.begin(), vec.end()): Reverses the vector.

8. Clearing Elements
    vec.clear();  // vec: {}

vec.erase(vec.begin() + 1, vec.begin() + 3); // erase multiple. second argument exclusive

insert another vector:
---------------------
std::vector<int> vec = {10, 20, 50};
std::vector<int> toInsert = {30, 40};

// Insert range from another vector
vec.insert(vec.begin() + 2, toInsert.begin(), toInsert.end());

extract some part of vector and assign to other:
-----------------------------------------------
    std::vector<int> subset(original.begin() + start, original.begin() + start + length);



custom sort:
-----------
    return true;	Means a is before b (no swap needed)
    return false;	Means a is after b (they will swap)
    struct CustomSort {
        bool operator()(const std::pair<int, int>& a,
                        const std::pair<int, int>& b) const {
            if (a.first == b.first) {
                return a.second <
                       b.second; // Sort by second element if first is equal
            }
            return a.first < b.first; // Otherwise, sort by first element
        }
    };
    vector<pair<int, int>> v;
    sort(v.begin(), v.end(), CustomSort());


remove duplicates from vector:
-------------------------------
vector<int> nums = {10, 20, 10, 30};
set<int> st(nums.begin(), nums.end());  // Convert vector to set to remove duplicates
nums.assign(st.begin(), st.end());

remove consecutive duplicates:
-------------------------------
nums.sort(nums.begin(), nums.end());
nums.erase(unique(nums.begin(), nums.end()), nums.end());

swap:
------
vector<int> v1 = {10, 20};
vector<int> v2 = {30, 40};
v1.swap(v2); // swap the vectors. 


48. Rotate Image:
------------------

Spiral matrix I, II, III, IV