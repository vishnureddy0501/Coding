push, pop, front, back, empty, size

1. Push Element (Enqueue)
    std::queue<int> myQueue;
    myQueue.push(10); // Adds 10 to the end of the queue
    myQueue.push(20); // Adds 20 to the end

2. Pop Element (Dequeue)
    Removes the element from the front of the queue.
    myQueue.pop(); // Removes the front element (10 in this case)

3. Access Front Element
    Returns the front element of the queue (the first element that was added).
    int frontElement = myQueue.front(); // Accesses the front element (20 after pop)

4. Access Back Element
    Returns the last element of the queue (the most recently added element).
    int backElement = myQueue.back(); // Accesses the last element (20 in this case)

5. Check if Queue is Empty
    Returns true if the queue is empty, false otherwise.
    if (myQueue.empty()) {
        std::cout << "Queue is empty\n";
    }

6. Get Size of Queue
    std::cout << "Size of queue: " << myQueue.size() << std::endl;

6. Delete From Back of Queue:
    q.pop_back();


queue<int>
----------
std::queue is specifically designed for FIFO behavior
meaning elements are inserted at the back and removed from the front.
 It does not provide access to the front for insertion, which is what push_front would require.

deque<int>
----------
q.push_back()
q.push_front()
q.pop_back()
q.pop_front()
q.size()
q.rear()
q.front()

insert middle:
------------
   deque<int> dq = {10, 20, 30, 40, 50};

    // Insert 25 in the middle (after the second element)
    auto it = dq.begin() + 2;  // Iterator pointing to the third element
    dq.insert(it, 25);

    // Display the deque after insertion
    for (int val : dq) {
        cout << val << " "; // Output: 10 20 25 30 40 50
    }


erase middle:
------------
int main() {
    deque<int> dq = {10, 20, 30, 40, 50};

    // Delete the element in the middle (after the second element)
    auto it = dq.begin() + 2;  // Iterator pointing to the third element (30)
    dq.erase(it);  // Removes 30

    // Display the deque after deletion
    for (int val : dq) {
        cout << val << " "; // Output: 10 20 40 50
    }

    return 0;
}


for pushing in the front, we need to use deque<int>
Deque is a double ended queue, where we can do push, pop from both front, back.